<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: requirejs | Codenfreude]]></title>
  <link href="http://benaugarten.com/blog/categories/requirejs/atom.xml" rel="self"/>
  <link href="http://benaugarten.com/"/>
  <updated>2012-07-31T21:48:51-07:00</updated>
  <id>http://benaugarten.com/</id>
  <author>
    <name><![CDATA[Ben Augarten]]></name>
    <email><![CDATA[baugarten@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[setting up requirejs with backbone]]></title>
    <link href="http://benaugarten.com/blog/2012/07/27/what-i-learned-from-my-internship/"/>
    <updated>2012-07-27T16:10:00-07:00</updated>
    <id>http://benaugarten.com/blog/2012/07/27/what-i-learned-from-my-internship</id>
    <content type="html"><![CDATA[<p>This is something I struggled with for a while, and thought I could help someone else go through it more easily. If you want to increase the organization of your client code, please keep reading. To do this, we're going to use requirejs and backbone. Theres plently of documentation on both but its easier to learn by example. If you need to be convinced why to use requirejs, you can refer to their <a href='http://requirejs.org/docs/why.html#1'>faq</a>. Short story is that its amazing. And why to use Backbone? Well, if you're not already using a client side javascript framework, you're probably doing it wrong, or rewriting the wheel (also wrong).</p>

<p>Now that you're convinced, lets get started with requirejs. The point of requirejs is to explcitly state all of your dependencies. So, you have a main file that links all your dependencies together. Lets call this <code>main.js</code>, which looks a little like this.</p>

<p>``` javascript main.js
require.config({</p>

<pre><code>paths: {
    'jquery': 'libs/jquery/jquery',
    'underscore': 'libs/underscore/underscore',
    'backbone': 'libs/backbone/backbone',
    'templates': '../templates',
},
shim: {
    'backbone': {
        deps: ['underscore', 'jquery'],
    },
}
</code></pre>

<p>});</p>

<p>require([</p>

<pre><code>‘app’,
</code></pre>

<p>], function(App) {</p>

<pre><code>App.initialize();
</code></pre>

<p>});
```</p>

<p>I just threw a lot at you. First, I set up a few rules for requirejs, telling it to look for jquery at libs/jquery/jquery.js (it automatically appends a .js), backbone in libs/backbone/backbone.js, and the same for underscore, and then I set up a templates directory in ../templates. Next, I made a shim configuration, telling requirejs that backbone relies on underscore and jquery to work, so requirejs has to load jquery and underscore before backbone.</p>

<p>Now, I have to be honest, I lied to you a little bit about how its loading these libraries. To add another level of indirection and ensure modular, strict dependency declaration, libs/jquery/jquery.js looks a little more like this</p>

<p>``` javascript libs/jquery/jquery.js
define([
   'libs/jquery/jquery-min'
], function() {
   return jQuery;
});</p>

<p>```
which loads jquery and then returns it for other modules to use. We do the same for underscore</p>

<p>``` javascript libs/underscore/underscore.js
define([</p>

<pre><code>'libs/underscore/underscore-min'
</code></pre>

<p>], function() {</p>

<pre><code>return _;
</code></pre>

<p>});
```</p>

<p>Backbone is a little different though because it has dependencies, we use <code>Backbone.noConflict()</code> to export a local reference to Backbone.</p>

<p>``` javascript lib/backbone/backbone.js
define([</p>

<pre><code>'libs/backbone/backbone-min'
</code></pre>

<p>], function() {</p>

<pre><code>_.noConflict();
$.noConflict();
return Backbone.noConflict();
</code></pre>

<p>});
```</p>

<p>Now that we have all of our dependencies straightened up, lets get back to the whole <code>require(['app'], function(App) { ... });</code>. This is the entry point of our application. It loads app.js and then executes the function, which just runs App.initialize(). My app.js looks like</p>

<p>``` javascript app.js
define([</p>

<pre><code>'jquery',
'underscore',
'backbone',
'router'
</code></pre>

<p>], function($, _, Backbone, Router) {</p>

<pre><code>var initialize = function() {
    Router.initialize();
}
return {
    initialize: initialize
};
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
</feed>
