<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Codenfreude]]></title>
  <link href="http://benaugarten.com/atom.xml" rel="self"/>
  <link href="http://benaugarten.com/"/>
  <updated>2013-07-14T19:08:16-07:00</updated>
  <id>http://benaugarten.com/</id>
  <author>
    <name><![CDATA[Ben Augarten]]></name>
    <email><![CDATA[baugarten@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Restful: A Better REST API using Node.js with Express]]></title>
    <link href="http://benaugarten.com/blog/2013/01/31/restful-a-better-rest-api-using-node-dot-js-with-express/"/>
    <updated>2013-01-31T13:06:00-08:00</updated>
    <id>http://benaugarten.com/blog/2013/01/31/restful-a-better-rest-api-using-node-dot-js-with-express</id>
    <content type="html"><![CDATA[<p>I&#8217;m going to introduce to you how to quickly make a REST API using a library I just built call <a href="https://github.com/baugarten/node-restful">Restful</a>. Restful, inspired by Tastypie for Django, generates API endpoints to perform CRUD operations on <a href="https://github.com/LearnBoost/mongoose">Mongoose</a> models. Restful integrates in <a href="https://github.com/visionmedia/express">Express</a> applications. Right now, the only return type is JSON but I plan on adding support for HTML responses and possibly others.</p>

<p>Iâ€™m going to walk you through how to make a REST API for two models, Users and Notes.</p>

<!-- more -->


<p>Before we start, you need to install <code>express</code> and <code>node-restful</code>. I will assume you already have mongodb installed</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongod
</span><span class='line'>npm install express
</span><span class='line'>npm install node-restful</span></code></pre></td></tr></table></div></figure>


<p>Users can create notes, notes are created by users, notes have titles and bodies, and so on.
First, lets write a little express boilerplate:</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">restful</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-restful&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">restful</span><span class="p">.</span><span class="nx">mongoose</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Make a new Express app</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connect to mongodb</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s2">&quot;mongodb://localhost/restful&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use middleware to parse POST data and use custom HTTP methods</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a new app, tells mongoose to connect to the specified mongodb instance, and finally listens for connections on port 3000</p>

<p>Next, we are going to add users by appending the following to our server</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">hashPassword</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">next</span><span class="p">({</span> <span class="nx">status</span><span class="o">:</span> <span class="mi">400</span><span class="p">,</span> <span class="nx">err</span><span class="o">:</span> <span class="s2">&quot;No password!&quot;</span> <span class="p">});</span> <span class="c1">// We can also throw an error from a before route</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span> <span class="o">=</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">hashSync</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// Using bcrypt</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">next</span><span class="p">();</span> <span class="c1">// Call the handler</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sendEmail</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// We can get the user from res.bundle and status code from res.status and </span>
</span><span class='line'>  <span class="c1">// trigger an error by calling next(err) or populate information that would otherwise be miggins</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span> <span class="c1">// I&#39;ll just pass though</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">restful</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span> <span class="s2">&quot;users&quot;</span><span class="p">,</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">password_hash</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">methods</span><span class="p">([</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="s1">&#39;put&#39;</span><span class="p">,</span> <span class="s1">&#39;delete&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">before</span><span class="o">:</span> <span class="nx">hashPassword</span><span class="p">,</span> <span class="c1">// Before we make run the default POST to create a user, we want to hash the password (implementation omitted)</span>
</span><span class='line'>    <span class="nx">after</span><span class="o">:</span> <span class="nx">sendEmail</span><span class="p">,</span> <span class="c1">// After we register them, we will send them a confirmation email</span>
</span><span class='line'>  <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">User</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="s1">&#39;/user&#39;</span><span class="p">);</span> <span class="c1">// Register the user model at the localhost:3000/user</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This registers a new mongoose model called user, makes endpoints for GET, POST, PUT, DELETE operations, and before creating the user using POST, it hashes the password</p>

<p>Now lets register Notes:</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">restful</span><span class="p">.</span><span class="nx">model</span><span class="p">(...);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">validateUser</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">creator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">next</span><span class="p">({</span> <span class="nx">status</span><span class="o">:</span> <span class="mi">400</span><span class="p">,</span> <span class="nx">err</span><span class="o">:</span> <span class="s2">&quot;Notes need a creator&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// We can use any mongoose method on our User object</span>
</span><span class='line'>  <span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">creator</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">model</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">restful</span><span class="p">.</span><span class="nx">objectNotFound</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Note</span> <span class="o">=</span> <span class="nx">restful</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s2">&quot;note&quot;</span><span class="p">,</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">creator</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;ObjectId&#39;</span><span class="p">,</span> <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">methods</span><span class="p">([</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="s1">&#39;delete&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="nx">before</span><span class="o">:</span> <span class="nx">validateUser</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;put&#39;</span><span class="p">,</span> <span class="nx">before</span><span class="o">:</span> <span class="nx">validateUser</span> <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Note</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="s1">&#39;/note&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets add a custom route for users where we can list all of the notes they have created.</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">User</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;notes&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handler</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// we get err and model parameters on detail routes (model being the one model that was found)</span>
</span><span class='line'>    <span class="nx">Note</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="nx">creator</span><span class="o">:</span> <span class="nx">model</span><span class="p">.</span><span class="nx">_id</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">({</span> <span class="nx">status</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">err</span><span class="o">:</span> <span class="s2">&quot;Something went wrong&quot;</span> <span class="p">});</span>
</span><span class='line'>      <span class="c1">//res.status is the status code</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// res.bundle is what is returned, serialized to JSON</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">bundle</span> <span class="o">=</span> <span class="nx">list</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">detail</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// detail routes operate on a single instance, i.e. /user/:id</span>
</span><span class='line'>  <span class="nx">methods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;get&#39;</span><span class="p">]</span> <span class="c1">// only respond to GET requests</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the route is registered at the key in the dict, so that above route would be at <code>/user/:id/notes</code></p>

<p>And now we have a whole bunch of validation and routes that were generated!</p>

<p>we have</p>

<p>GET /note<br/>
GET /note/:id<br/>
POST /note<br/>
PUT /note/:id<br/>
DELETE /note/:id<br/>
GET /user<br/>
GET /user/:id<br/>
POST /user<br/>
PUT /user/:id<br/>
GET /user/:id/notes<br/>
DELETE /user/:id</p>

<p>See! Easy.
The <a href="https://github.com/baugarten/node-restful/blob/master/examples/notes.js">full source code</a> is available on github!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Started with requireJS and Backbone]]></title>
    <link href="http://benaugarten.com/blog/2012/08/22/get-started-with-requirejs-and-backbone/"/>
    <updated>2012-08-22T18:32:00-07:00</updated>
    <id>http://benaugarten.com/blog/2012/08/22/get-started-with-requirejs-and-backbone</id>
    <content type="html"><![CDATA[<p>This is something I struggled with for a while &#8211; hopefully you donâ€™t. If you want to learn how to use requireJS and backbone to unuglify your client side code, keep reading. There&#8217;s plently of documentation on both requireJS and backbone but its easier to learn by example. If you need to be convinced why to use requireJS, you can refer to their <a href='http://requirejs.org/docs/why.html#1'>faq</a>. Short story is that its amazing for organization, code health, and although I havenâ€™t launched anything with it (yet), Iâ€™m sure the speed gains are tremendous if used correctly. And why use Backbone? Well, if you&#8217;re not already using a client side javascript framework, you&#8217;re probably doing it wrong. If youâ€™re using another, then you can still follow along, this deals much more with requireJS.</p>

<!-- more -->


<p>Lets get started with requireJS. One of the main benefits of requireJS is that every dependency of a javascript file is clearly and explicitly stated. There are two main ways to state dependencies. The first is to use a shim config, the second is the wrap all your code in a <code>define</code>, that lists your dependencies. There are advantages to both. The downside and upside to using shim is that everything is located in one file. This is nice for centralization but makes modules less portable. For this reason, I prefer the second when possible because you donâ€™t need to copy the shim config whenever you reuse a file. Weâ€™re going to use a little bit of both for extra clarity, indirection, and so you can how to  use them. Before we start, make an html page and instead of adding all your javascript files, just add this one line</p>

<p><code>&lt;script data-main="scripts/main" src="scripts/require.js"&gt;&lt;/script&gt;</code></p>

<p>This loads <code>requireJS</code> and makes the entry point <code>scripts/main.js</code>. Here&#8217;s our main file.</p>

<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;jquery&#39;</span><span class="o">:</span> <span class="s1">&#39;libs/jquery/jquery&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;underscore&#39;</span><span class="o">:</span> <span class="s1">&#39;libs/underscore/underscore&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;backbone&#39;</span><span class="o">:</span> <span class="s1">&#39;libs/backbone/backbone&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;templates&#39;</span><span class="o">:</span> <span class="s1">&#39;../templates&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;underscore&#39;</span><span class="p">,</span> <span class="s1">&#39;jquery&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>    <span class="err">â€˜</span><span class="nx">app</span><span class="err">â€™</span><span class="p">,</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">App</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I just threw a lot at you. First, I set up a few rules for requireJS, telling it to look for the alias <code>jquery</code> at libs/jquery/jquery.js (it automatically appends a .js), <code>backbone</code> in libs/backbone/backbone.js, and the same for <code>underscore</code>, and then I set up a templates directory in ../templates. Next, I made a shim configuration, telling requireJS that backbone relies on underscore and jquery to work, so requireJS has to load jquery and underscore before backbone. Next, it loads <code>app.js</code> and calls <code>initialize()</code>.</p>

<p>Now, I have to be honest, I havenâ€™t told you the whole truth about how its loading these libraries. To add another level of indirection and ensure modular, strict dependency declaration, libs/jquery/jquery.js looks a little more like this</p>

<figure class='code'><figcaption><span>libs/jquery/jquery.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>   <span class="s1">&#39;libs/jquery/jquery-min&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>which loads the correct jquery and then returns it for other modules to use. This way, when we update versions of jquery we donâ€™t have to touch our <code>main.js</code> but instead jquery controls how it loads itself. We do the same for underscore</p>

<figure class='code'><figcaption><span>libs/underscore/underscore.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;libs/underscore/underscore-min&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Backbone is a little different though because it has dependencies, we use <code>Backbone.noConflict()</code> to export a local reference to Backbone versus introducing it into the global namespace.</p>

<figure class='code'><figcaption><span>lib/backbone/backbone.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;libs/backbone/backbone-min&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have all of our dependencies straightened up, lets get back to the whole <code>require(['app'], function(App) { ... });</code>. This is the entry point of our application. It loads <code>app.js</code> and then executes <code>App.initialize()</code>. My <code>app.js</code> looks like</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;router&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Router</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">initialize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Router</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="nx">initialize</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This loads <code>router.js</code>, my Backbone router and then from the backbone router, I load the necessary components.</p>

<figure class='code'><figcaption><span>router.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// whatever other dependencies you need</span>
</span><span class='line'>    <span class="err">â€˜</span><span class="nx">models</span><span class="o">/</span><span class="nx">mymodel</span><span class="err">â€™</span> <span class="c1">// or alias it in main.js</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">MyModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">AppRouter</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// implement your router</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">initialize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AppRouter</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">myModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// do all the initialization work</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">initialize</span><span class="o">:</span> <span class="nx">initialize</span> <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now your Backbone models look like this:</p>

<figure class='code'><figcaption><span>mymodel.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span><span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// your Backbone model</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">MyModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now you can add whatever other models, views or collections you want by adding it to <code>main.js</code>. Be sure to wrap it in a <code>define</code> to state all its dependencies and load it asynchronously wherever you want!</p>

<p>I know this has covered a lot, email me if you have any questions.</p>

<p>If you&#8217;re still down here, you should follow me on <a href="http://twitter.com/benaugarten">twitter</a></p>

<p>Or maybe you have a job offer? Check out my <a href="http://benaugarten.com/hireme/">resume</a> or send me an <a href="mailto:baugarten@gmail.com">email</a>. I&#8217;m looking for freelance work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learn to love frustration]]></title>
    <link href="http://benaugarten.com/blog/2012/07/08/learn-to-love-frustration/"/>
    <updated>2012-07-08T20:28:00-07:00</updated>
    <id>http://benaugarten.com/blog/2012/07/08/learn-to-love-frustration</id>
    <content type="html"><![CDATA[<p>programming is frustrating. If you disagree, <a href="mailto:baugarten@gmail.com">email me</a>. It should be frustrating, it means it&#8217;s challenging &#8211; frustration oriented programming transcends language and time. It should be taught and encouraged.</p>

<!-- more -->


<p>Just the other day I copied a dependency to a new location, changed all the files linking to it, but then edited the old file, confused why the changes weren&#8217;t being applied, finally realizing my error after thirty painful minutes (I was learning a new configuration language in my defense). Of course, I felt like an idiot, but I already knew I was an idiot so I just kept going. That&#8217;s the thing, I don&#8217;t get frustrated by programming, I almost seek the inevitable frustration of learning new languages and libraries and practices &#8211; I learned how to program during high school by myself on a caffeine binge at 4 in the morning on a school night debugging segmentation faults (I realize I sound really cool right now). It was painful. But I learned valuable lessons &#8211; check the most obvious problems first, compartmentalize potential failures, and eventually just use the debugger, it is there for a reason. I&#8217;m glad I did it though, because, sure, I didn&#8217;t know any better and was just messing around, but now it takes a lot to frustrate me, I dare you to try. I own undocumented APIs, null pointers and all things horrible because I&#8217;ve chased much dumber problems and wasted my time doing stupider things.</p>

<p>It&#8217;s frustration that makes programming a mystic and almost legendary profession. People wonder how programmers began, as if they woke up one morning and wrote the linux kernel, how I imagine others find their professions. Most other people will immediately throw their hands in the air and ask for help when encountering an unfamiliar problem (think parents and computers), but the programmer doesn&#8217;t &#8211; they have an uncanny ability to stare frustration down the throat and continue on. That&#8217;s how I started programming; debugging my computer problems turned into linux turned into bash turned into C. I was not magic. I just put in a lot of work and learned a lot &#8211; a lot about how I deal with frustration. I&#8217;m lucky, I deal marvelously with frustration &#8211; programmers need to.</p>

<p>This ability should be taught not just as a byproduct of computer science &#8211; frustration lies at the heart of all programming and in this imperfect science I believe it always will. No code is perfect, everything is broken, and it all fails spectacularly in the most surprising of ways. Students need to be taught how to cope with, seek, and love frustration, immunize themselves to it or else they will never be able to sustain a lifetime of learning as a programmer. If ever someone stops becoming frustrated, they probably aren&#8217;t challenging themselves, learning anything new, and they most definitely aren&#8217;t advancing computer science.</p>

<p>Ways to deal with frustration should be taught in schools. Not everything is magic, sometimes failure is necessary, especially in programming. But it&#8217;s not just in programming &#8211; I surmise that frustration is one of the root problems of America&#8217;s lack of budding scientists (but this calls for another post and actual research). No one wants to learn science because science has clear cut failure that frustrates students who aren&#8217;t used to coping. The failure and frustration in the sciences makes it hard and unapproachable. Students should be taught to deal with frustration productively, challenged to fail early on, and I hope it won&#8217;t be alone at 4 in the morning with a cup of coffee. Frustration is everywhere, learn to love it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[default behavior]]></title>
    <link href="http://benaugarten.com/blog/2012/07/02/default-behavior/"/>
    <updated>2012-07-02T20:25:00-07:00</updated>
    <id>http://benaugarten.com/blog/2012/07/02/default-behavior</id>
    <content type="html"><![CDATA[<p>Everyone should publish something they wrote on their own &#8211; their own conception, implementation, and product. It is a completely unique, surreal feeling sending your own brainchild out into the world, seeing people use it and finally tear it to shreds. I recently began an internship (and soon will finish), tirelessly writing code that I&#8217;ll never see again, as a developer or user. I am writing an internal tool, possibly the worst combination of words an undermotivated 19 year old intern could hear.</p>

<!-- more -->


<p>I lazily submit chunks of code, waving goodbye as they disappear into the abyss of &#8216;production.&#8217; I&#8217;ll never look at them again, and I&#8217;m sure no one else will either. Whatever I wrote will forever live in a zombie state, it will never die, on the off chance it bites back, but it will never really live and serve its purpose either (I&#8217;ll leave before its done), much like developers that sell out too early. I understand the need for money, but why settle for a full time, 9-5/6/7/8? job when programmers have a unique opportunity to create nearly anything they want with they own computer? Not many professions have the opportunity to take their craft into their home and make something useful for people everywhere.</p>

<p>I talk mostly to college students and recent grads, but I find that people don&#8217;t often evaluate their work experience and excuse their own lack of independence by citing perks and (sometimes falsly construed) perceptions of monetary necessity. Sure, I get it, there are top chefs and free food and espresso machines and rock walls and there&#8217;s someone that wipes them after they go to the bathroom, but at the end of the day, I&#8217;m sure they are just as unsatisfied as I am, wishing they had the energy to work on something they really care about. I hear about people&#8217;s &#8216;side projects&#8217; all the time but what stops their side projects from taking over their lives? I know I can&#8217;t help but let my side projects take over my life. I try to see past the perks, but the walls of my cubicle sometimes block my view.</p>

<p>It seems easy to fall into the trap, especially for a college grad used to cheap vodka and ramen, but nothing stacks up to the amazing feeling of making something that you care about. It doesn&#8217;t even have to be good. People don&#8217;t even have to like it. Hell, people don&#8217;t even have to use it! Don&#8217;t believe me? I recently developed a pretty terrible <a href="https://play.google.com/store/apps/details?id=com.owleyes.moustache&amp;hl=en">android app</a>, its buggy on certain systems (it works on mine, I swear), but I love it! I loved making it and I especially love watching the number of people using it slowly climb to my delight and scouring at the terrible reviews (I&#8217;m on an old api, leave me alone). It is my own. And I swear that I will not settle into a cubicle (again) until I chase down that thrill of self fulfillment, chain myself to it, and, in case of emergency, fail miraculously, believing in what I did &#8211; this should be the default behavior.</p>
]]></content>
  </entry>
  
</feed>
